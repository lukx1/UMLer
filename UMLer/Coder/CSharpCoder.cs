using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UMLer.DiagramData;

namespace UMLer.Coder
{
    public class CSharpCoder : ICoder
    {
        public Language CodingLanguage => Language.CSHARP;

        public string OutputDirectory { get; set; } = "";
        public Diagram Diagram { get; set; }

        private const string CSHARP_FILE_CLASS_HEADER = "using System;\r\n"+
                                                        "using System.Collections.Generic;\r\n" +
                                                        "using System.IO;\r\n" +
                                                        "using System.Linq;\r\n" +
                                                        "using System.Text;\r\n" +
                                                        "using System.Threading.Tasks;\r\n" +
            "\r\n" +
            "/* AUTOMATICALLY GENERATED BY UMLer */\r\n";

        private string GetAccessModCore(AccessModifier accessModifier)
        {
            switch (accessModifier)
            {
                case AccessModifier.PUBLIC:
                case AccessModifier.PROTECTED:
                case AccessModifier.PRIVATE:
                    return accessModifier.ToString().ToLower() + " ";
                default:
                case AccessModifier.NONE:
                    return "";
            }
        }

        private string GetExtraMods(IList<ExtraModifier> em)
        {
            StringBuilder builder = new StringBuilder();
            foreach (var mod in em)
            {
                if (builder.Length > 0)
                    builder.Append(" ");
                builder.Append(mod.ToString().ToLower());
            }
            if(em.Count > 0)
                builder.Append(" ");
            return builder.ToString();
        }

        private void WriteFields(StreamWriter writer,Clazz clazz)
        {
            foreach (var field in clazz.Fields)
            {
                writer.WriteLine(
                    $"\t" +
                    $"{GetAccessModCore(field.AccessModifier)}" +
                    $"{GetExtraMods(field.ExtraModifiers)}" +
                    $"{field.Type} " +
                    $"{field.Name};");
            }
        }

        private void WriteMethods(StreamWriter writer, Clazz clazz)
        {
            foreach (var method in clazz.Methods)
            {
                writer.WriteLine(
                    $"\t" +
                    $"{GetAccessModCore(method.AccessModifier)}" +
                    $"{GetExtraMods(method.ExtraModifiers)}" +
                    $"{method.ReturnType} " +
                    $"{method.Name}({method.ParametersToSyntax()})\r\n"+
                    "\t{\r\n"+
                    "\t\tthrow new NotImplementedException();"+
                    "\t}"
                    );
            }
        }

        private void WriteClass(StreamWriter writer, Clazz clazz)
        {
            writer.WriteLine($"" +
                    $"{GetAccessModCore(clazz.AccessModifier)}" +
                    $"{GetExtraMods(clazz.ExtraModifiers)}" +
                    $"class " +
                    $"{clazz.Name} " + "{\r\n");
        }

        private void CreateClass(Clazz clazz)
        {
            var resultPath = Path.Combine(OutputDirectory, clazz.Name, ".cs");
            using(var writer = new StreamWriter(OutputDirectory))
            {
                writer.Write(CSHARP_FILE_CLASS_HEADER);
                WriteClass(writer, clazz);
                WriteFields(writer, clazz);
                writer.Write("\r\n");
                WriteMethods(writer, clazz);
                writer.WriteLine("}");
            }
        }

        public void CreateCode(Diagram diagram)
        {
            if (!Directory.Exists(OutputDirectory))
                throw new DirectoryNotFoundException($"Directory {OutputDirectory} does not exist");
            if (Diagram == null)
                throw new NullReferenceException("Diagram hasn't been set");

            var clazzes = diagram.PullAllClazzes();
            foreach (var clazz in clazzes)
            {
                CreateClass(clazz);
            }
        }

        public bool AreClazzesValid(Diagram diagram)
        {
            throw new NotImplementedException();
        }

        public void CreateCode()
        {
            throw new NotImplementedException();
        }

        public bool AreClazzesValid()
        {
            throw new NotImplementedException();
        }
    }
}
